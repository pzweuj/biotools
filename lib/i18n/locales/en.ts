export const en = {
  common: {
    loading: "Loading...",
    error: "Error",
    success: "Success",
    cancel: "Cancel",
    confirm: "Confirm",
    search: "Search",
    clear: "Clear",
    copy: "Copy",
    copied: "Copied",
    enabled: "Enabled",
    disabled: "Disabled",
  },
  nav: {
    title: "BioTools",
    subtitle: "Bioinformatics Tools Lib",
    selectTool: "Select a tool to get started",
    welcome: "Welcome to BioTools",
    welcomeDesc:
      "Select a tool from the sidebar to get started. All calculations are performed locally in your browser for data security.",
  },
  intro: {
    subtitle: "Bioinformatics Tools Library",
    about: {
      title: "About Project",
      description: "BioTools is a modern collection of bioinformatics tools designed for biologists and students. It features a clean black-and-white geek-style design with an intuitive interface and powerful functionality.",
      viewSource: "View Source",
      author: "Author",
    },
    usage: "Select a tool from the left sidebar to get started, click the top-right corner to switch languages",
  },
  categories: {
    "sequence-analysis": "Sequence Analysis",
    "primer-design": "Primer Design",
    "molecular-biology": "Molecular Biology",
    "data-processing": "Data Processing",
    "reference-tables": "Reference Tables",
  },
  tools: {
    noResults: "No matching tools found",
    "base-complement": {
      name: "Base Complement",
      description: "Calculate complement, reverse, and reverse complement of DNA sequences with IUPAC base code support",
      inputLabel: "Input DNA Sequence",
      inputPlaceholder: "Enter DNA sequence, supports standard bases (ATCG) and IUPAC codes (like RYSWKM etc.)...",
      outputLabel: "Output Result",
      outputPlaceholder: "Click buttons above to see results...",
      complement: "Complement",
      reverse: "Reverse",
      reverseComplement: "Reverse Complement",
      preserveDelimiters: "Preserve delimiter format (for Excel copied data)",
      inputLength: "Input Length",
      outputLength: "Output Length",
      result: "Result",
      original: "Original",
      output: "Result",
    },
    "tm-calculator": {
      name: "Tm Calculator",
      description: "Calculate primer melting temperature",
      sequenceLabel: "Primer Sequences",
      sequencePlaceholder: "Enter DNA sequences, one per line\nExample:\nATCGATCG\nGCTAGCTA\nTTAAGGCC",
      multipleSequencesHint: "💡 Enter one primer sequence per line for batch calculation",
      saltLabel: "Salt Concentration (mM)",
      methodLabel: "Calculation Method",
      wallace: "Wallace Rule",
      basicGc: "Basic GC Method",
      saltAdjusted: "Salt-Adjusted Method",
      santaLucia: "SantaLucia Method",
      nearestNeighbor: "Nearest Neighbor",
      calculate: "Calculate Tm",
      results: "Results",
      primers: "primers",
      sequence: "Sequence",
      length: "Length",
      gcContent: "GC Content",
      tmValue: "Tm Value",
      cleaned: "Cleaned",
      algorithm: "Algorithm",
      basicgc: "Basic GC Method",
      saltadjusted: "Salt-Adjusted Method",
      santalucia: "SantaLucia Method",
      nearestneighbor: "Nearest Neighbor",
      wallaceDescription: "Simple and fast, suitable for short primers (Tm = 2×AT + 4×GC)",
      "basic-gcDescription": "Standard method, Wallace rule for short sequences, GC content for longer ones",
      "salt-adjustedDescription": "Improved algorithm considering salt concentration effects for standard PCR",
      "santa-luciaDescription": "NCBI recommended high-precision algorithm with sequence composition corrections",
      "nearest-neighborDescription": "Classic thermodynamic-based algorithm widely used in primer design",
    },
    "amino-acid-table": {
      name: "Amino Acid Table",
      description: "Query amino acid abbreviations and codons",
      searchPlaceholder: "Enter amino acid name, abbreviation or codon...",
      aminoAcid: "Amino Acid",
      oneCode: "One Letter",
      threeCode: "Three Letter",
      codons: "Codons",
      selectedCodon: "Selected Codon",
      noResults: "No matching amino acids found",
    },
    "sequence-stats": {
      name: "Sequence Statistics Analyzer",
      description: "Calculate sequence length, GC content, base frequency, complexity and repeat detection",
      sequenceLabel: "Input Sequences",
      sequencePlaceholder: "Enter DNA/RNA sequences, supports FASTA format\nExample:\n>Sequence 1\nATCGATCGATCG\n>Sequence 2\nGCTAGCTAGCTA\nOr plain sequences:\nATCGATCG\nGCTAGCTA",
      formatHint: "💡 Supports FASTA format and plain sequences, one sequence per line",
      analyze: "Analyze Sequences",
      results: "Analysis Results",
      sequences: "sequences",
      overview: "Overview",
      composition: "Base Composition",
      repeats: "Repeat Sequences",
      dinucleotide: "Dinucleotide",
      sequenceName: "Sequence Name",
      length: "Length",
      gcContent: "GC Content",
      atContent: "AT Content",
      complexity: "Complexity",
      other: "Other",
      repeatsFound: "Repeats Found",
      positions: "Positions",
      noRepeats: "No repeat sequences found",
      dinucleotideFreq: "Dinucleotide Frequency Distribution",
    },
    "orf-finder": {
      name: "ORF Finder",
      description: "Find open reading frames in DNA sequences with 6-frame analysis",
      sequenceLabel: "Input DNA Sequences",
      sequencePlaceholder: "Enter DNA sequences, supports FASTA format\nExample:\n>Gene 1\nATGGCTAGCTAGCTAGCTAG\n>Gene 2\nATGAAACCCGGGTTTAAA",
      formatHint: "💡 Supports FASTA format and plain sequences",
      minLength: "Minimum Length (bp)",
      minLengthHint: "Minimum ORF length, must be multiple of 3",
      startCodons: "Start Codons",
      startCodonsHint: "Separate multiple start codons with commas",
      geneticCodeInfo: "Uses standard genetic code for translation, stop codons: TAA, TAG, TGA",
      findOrfs: "Find ORFs",
      results: "Analysis Results",
      orfsFound: "ORFs found",
      tableView: "Table View",
      detailView: "Detail View",
      sequenceLength: "Sequence Length",
      frame: "Frame",
      strand: "Strand",
      start: "Start",
      end: "End",
      length: "Length",
      startCodon: "Start Codon",
      stopCodon: "Stop Codon",
      molecularWeight: "Molecular Weight",
      noOrfsFound: "No ORFs found",
      position: "Position",
      dnaSequence: "DNA Sequence",
      proteinSequence: "Protein Sequence",
    },
    "sequence-translation": {
      name: "Sequence Translation",
      description: "DNA→RNA transcription, RNA→protein translation, genetic code selection, reverse complement",
      inputType: "Input Type",
      geneticCode: "Genetic Code",
      frame: "Reading Frame",
      stopMode: "Stop Codon Mode",
      truncate: "Truncate at first stop",
      preserveDelimiters: "Preserve delimiters (tabs, spaces, commas)",
      preserveHint: "Keep spaces/Tabs/commas so multiple sequences remain aligned when pasting from spreadsheets.",
      inputLabel: "Input sequence (DNA/RNA)",
      inputPlaceholder:
        "Paste DNA or RNA sequence. Delimiters like spaces, tabs, commas will be preserved if enabled.",
      transcribe: "DNA → RNA",
      translate: "RNA → Protein",
      reverseComplement: "Reverse Complement",
      outputLabel: "Output",
      outputPlaceholder: "Result will appear here",
      inputLength: "Input length",
      outputLength: "Output length",
    },
    "primer-dimer-detector": {
      name: "Primer Dimer Detector",
      description: "Detect primer complementarity, calculate dimer formation free energy, visualize structures, batch analysis",
      primerLabel: "Input Primers",
      primerPlaceholder: "Enter primer sequences, one per line or FASTA format\nExample:\n>Forward Primer\nATCGATCGATCG\n>Reverse Primer\nGCTAGCTAGCTA",
      formatHint: "💡 Supports FASTA format and plain sequences. Self-dimers and hetero-dimers will be analyzed.",
      analyze: "Analyze Dimers",
      results: "Analysis Results",
      dimers: "dimers detected",
      lowRisk: "Low Risk",
      mediumRisk: "Medium Risk",
      highRisk: "High Risk",
      overview: "Overview",
      structures: "Structures",
      risk: "Risk",
      primerPair: "Primer Pair",
      complementarity: "Complement %",
      freeEnergy: "ΔG (kcal/mol)",
      length: "Length",
      warning: "High-risk dimers (ΔG < -8 kcal/mol) may interfere with PCR efficiency. Consider redesigning primers or adjusting reaction conditions.",
    },
    "pcr-product-calculator": {
      name: "PCR Product Size Calculator",
      description: "Calculate primer positions and amplification product sizes from FASTA templates and primer pairs with specificity checking",
      templateLabel: "Template Sequences (FASTA)",
      templatePlaceholder: "Enter template sequences in FASTA format\nExample:\n>Template 1\nATCGATCGATCGATCGATCG\n>Template 2\nGCTAGCTAGCTAGCTAGCTA",
      primerLabel: "Primer Sequences",
      primerPlaceholder: "Enter primer sequences, FASTA format or one per line\nExample:\n>Forward Primer\nATCGATCGATCG\n>Reverse Primer\nGCTAGCTAGCTA",
      formatHint: "💡 Templates must be in FASTA format. Primers support FASTA or plain sequences. Maximum 2 mismatches allowed for primer binding.",
      calculate: "Calculate PCR Products",
      results: "PCR Analysis Results",
      combinations: "primer combinations",
      highSpecificity: "High",
      mediumSpecificity: "Medium",
      lowSpecificity: "Low",
      overview: "Overview",
      details: "Details",
      specificity: "Specificity",
      template: "Template",
      primerPair: "Primer Pair",
      productSize: "Product Size",
      products: "Products",
      forwardMatches: "Forward matches",
      reverseMatches: "Reverse matches",
      pcrProducts: "PCR Products",
      product: "Product",
      noProducts: "No PCR products found with current primer pair",
      tip: "High specificity indicates unique products with perfect primer matches. Low specificity suggests multiple products or primer mismatches.",
      primerPairs: "Primer Pairs",
      addPair: "Add Pair",
      pairNumber: "Primer Pair",
      forwardPrimer: "Forward Primer",
      reversePrimer: "Reverse Primer",
    },
    "molecular-weight-calculator": {
      name: "Molecular Weight Calculator",
      description: "Calculate molecular weights for DNA/RNA/proteins, concentration conversion, dilution calculator",
      molecularWeight: "MW",
      concentration: "Concentration",
      dilution: "Dilution",
      sequenceLabel: "Input Sequences",
      sequenceType: "Type",
      sequencePlaceholder: "Enter sequences in FASTA format or plain text\nExample:\n>Sequence 1\nATCGATCGATCG\n>Sequence 2\nGCTAGCTAGCTA",
      calculate: "Calculate MW",
      results: "Results",
      sequences: "sequences",
      sequenceName: "Name",
      length: "Length",
      mw: "MW (g/mol)",
      type: "Type",
      composition: "Composition",
      protein: "Protein",
      tip: "Molecular weights include phosphate groups for DNA/RNA. Protein calculations account for peptide bond formation.",
      concentrationCalc: "Concentration Calculator",
      dilutionCalc: "Dilution Calculator",
      dilutionHint: "C₁V₁ = C₂V₂ - Leave one field empty to calculate it",
      mass: "Mass",
      volume: "Volume",
      unit: "Unit",
      molecularWeightLabel: "MW (g/mol)",
      concentrationResult: "Concentration",
      molarity: "Molarity",
      copies: "Copies",
      initialConc: "Initial Conc.",
      initialVol: "Initial Vol.",
      finalConc: "Final Conc.",
      finalVol: "Final Vol.",
      dilutionFactor: "Dilution Factor",
      fieldsCompleted: "fields completed",
      autoCalculating: "Auto calculating...",
      fillThreeFields: "Fill any 3 fields to calculate the 4th",
    },
    "restriction-enzymes": {
      name: "Restriction Enzyme Tool",
      description: "Find common sites, render digestion map, multi-enzyme analysis, and basic cloning planning",
      analysis: "Restriction Analysis",
      sequence: "Input DNA Sequence",
      enzymes: "Select Enzymes",
      circular: "Circular DNA",
      enzyme: "Enzyme",
      position: "Position",
      strand: "Strand",
      overhang: "Overhang",
      fragments: "Fragments",
      cloning: "Cloning Planner",
      cloneHint: "Choose enzymes and check sticky/blunt-end compatibility",
      vector: "Vector Sequence",
      insert: "Insert Sequence",
      compatible: "Compatible for ligation",
      incompatible: "Not compatible",
      tool: {
        needSeq: "Provide sequences",
        noSite: "Site not found in sequence",
        bluntOk: "Blunt ends ligate, lower efficiency",
        typeMismatch: "Overhang type mismatch",
        stickyOk: "Sticky ends are compatible",
        seqMismatch: "Overhang sequences are not compatible",
      },
    },
    "protein-analysis": {
      name: "Protein Analysis Tool",
      description: "Calculate isoelectric point (pI), hydrophobicity analysis, and amino acid composition",
      input: "Protein Sequence Input",
      sequence: "Protein Sequence",
      placeholder: "Enter protein sequence (single letter amino acid codes)\nExample: MKTAYIAKQRQISFVK",
      residues: "residues",
      isoelectric: "Isoelectric Point (pI)",
      piUnit: "pH units",
      hydrophobicity: "Hydrophobicity",
      kyteDoolittle: "Kyte-Doolittle scale",
      hydrophobic: "Hydrophobic",
      hydrophilic: "Hydrophilic",
      composition: "Amino Acid Composition",
      polar: "Polar",
      charged: "Charged",
      special: "Special",
      aminoAcid: "AA",
      count: "Count",
      percentage: "%",
      hydrophobicityValue: "Hydrophobicity",
      note: "pI calculated using Henderson-Hasselbalch equation. Hydrophobicity based on Kyte-Doolittle scale.",
    },
    "sequence-format-converter": {
      name: "Sequence Format Converter",
      description: "Convert between FASTA/GenBank/EMBL formats, rename IDs, filter by length, and remove duplicates",
      input: "Input Sequences",
      inputLabel: "Paste sequences (FASTA/GenBank/EMBL format)",
      inputPlaceholder: ">seq1\nATCGATCGATCG\n>seq2\nGCTAGCTAGCTA",
      sequencesDetected: "sequences detected",
      processing: "Processing Options",
      outputFormat: "Output Format",
      renamePattern: "ID Rename Pattern",
      patternHint: "{n} = number, {id} = original ID",
      lengthFilter: "Length Filter",
      minLength: "Min",
      maxLength: "Max",
      deduplication: "Deduplication",
      removeDuplicates: "Remove duplicate sequences",
      deduplicationHint: "Keep only the first occurrence of identical sequences",
      enabled: "✓ Enabled",
      disabled: "○ Disabled",
      process: "Process Sequences",
      output: "Processed Output",
      note: "Supports automatic format detection. GenBank and EMBL parsing is simplified for basic conversion needs.",
    },
    "qpcr-data-analyzer": {
      name: "qPCR Data Analyzer",
      description: "Ct calculation, ΔΔCt relative quantification, standard curve fitting, and efficiency calculation",
      ddctAnalysis: "ΔΔCt Analysis",
      standardCurve: "Standard Curve",
      ddctInput: "ΔΔCt Data Input",
      referenceGene: "Reference Gene",
      controlGroup: "Control Group",
      treatmentGroup: "Treatment Group",
      ctData: "Ct Data (Sample, Target, Ct, Group)",
      ctPlaceholder: "Sample1\tGAPDH\t20.5\tcontrol\nSample1\tGeneX\t25.2\tcontrol\nSample2\tGAPDH\t20.8\ttreatment\nSample2\tGeneX\t23.1\ttreatment",
      dataPoints: "data points loaded",
      sample: "Sample",
      target: "Target",
      group: "Group",
      foldChange: "Fold Change",
      standardCurveInput: "Standard Curve Data",
      dilutionData: "Dilution Data (Dilution, Ct)",
      dilutionPlaceholder: "1000000\t15.2\n100000\t18.5\n10000\t21.8\n1000\t25.1\n100\t28.4",
      curvePoints: "curve points loaded",
      curveParameters: "Curve Parameters",
      slope: "Slope",
      intercept: "Intercept",
      efficiency: "Efficiency",
      dilution: "Dilution",
      note: "ΔΔCt method: 2^(-ΔΔCt). PCR efficiency calculated from slope: E = 10^(-1/slope) - 1. Optimal efficiency: 90-110%.",
    },
  },
}

export const en = {
  common: {
    loading: "Loading...",
    error: "Error",
    success: "Success",
    cancel: "Cancel",
    confirm: "Confirm",
    search: "Search",
    clear: "Clear",
    copy: "Copy",
    copied: "Copied",
    enabled: "Enabled",
    disabled: "Disabled",
    calculate: "Calculate",
  },
  nav: {
    title: "BioTools",
    subtitle: "Bioinformatics Tools Lib",
    selectTool: "Select a tool to get started",
    welcome: "Welcome to BioTools",
    welcomeDesc:
      "Select a tool from the sidebar to get started. All calculations are performed locally in your browser for data security.",
    backToHome: "Back to Home",
    expandSidebar: "Expand Sidebar",
    collapseSidebar: "Collapse Sidebar",
  },
  intro: {
    subtitle: "Bioinformatics Tools Library",
    about: {
      title: "About Project",
      description: "BioTools is a modern collection of bioinformatics tools designed for biologists and students. It features a clean black-and-white geek-style design with an intuitive interface and powerful functionality.",
      viewSource: "View Source",
      author: "Author",
    },
    usage: "Select a tool from the left sidebar to get started, click the top-right corner to switch languages",
  },
  categories: {
    "sequence-analysis": "Sequence Analysis",
    "primer-design": "Primer Design",
    "molecular-biology": "Molecular Biology",
    "data-processing": "Data Processing",
    "laboratory-calculations": "Laboratory Calculations",
    "reference-tables": "Reference Tables",
    "external-tools": "External Tools",
  },
  tools: {
    noResults: "No matching tools found",
    "base-complement": {
      name: "Base Complement",
      description: "Calculate complement, reverse, and reverse complement of DNA sequences with IUPAC base code support and FASTA format multi-sequence input",
      inputLabel: "Input DNA Sequence",
      inputPlaceholder: "Enter DNA sequence, supports standard bases (ATCG) and IUPAC codes (like RYSWKM etc.)\n\nSupports FASTA format multi-sequence input:\n>sequence1\nATCGATCG\n>sequence2\nGCTAGCTA...",
      outputLabel: "Output Result",
      outputPlaceholder: "Click buttons above to see results...",
      complement: "Complement",
      reverse: "Reverse",
      reverseComplement: "Reverse Complement",
      preserveDelimiters: "Preserve format structure",
      inputLength: "Input Length",
      outputLength: "Output Length",
      result: "Result",
      original: "Original",
      output: "Result",
    },
    "tm-calculator": {
      name: "Tm Calculator",
      description: "Calculate primer melting temperature",
      sequenceLabel: "Primer Sequences",
      sequencePlaceholder: "Enter DNA sequences, one per line\nExample:\nATCGATCG\nGCTAGCTA\nTTAAGGCC",
      multipleSequencesHint: "💡 Enter one primer sequence per line for batch calculation",
      saltLabel: "Salt Concentration (mM)",
      methodLabel: "Calculation Method",
      wallace: "Wallace Rule",
      basicGc: "Basic GC Method",
      saltAdjusted: "Salt-Adjusted Method",
      santaLucia: "SantaLucia Method",
      nearestNeighbor: "Nearest Neighbor",
      calculate: "Calculate Tm",
      results: "Results",
      primers: "primers",
      sequence: "Sequence",
      length: "Length",
      gcContent: "GC Content",
      tmValue: "Tm Value",
      cleaned: "Cleaned",
      algorithm: "Algorithm",
      basicgc: "Basic GC Method",
      saltadjusted: "Salt-Adjusted Method",
      santalucia: "SantaLucia Method",
      nearestneighbor: "Nearest Neighbor",
      wallaceDescription: "Simple and fast, suitable for short primers (Tm = 2×AT + 4×GC)",
      "basic-gcDescription": "Standard method, Wallace rule for short sequences, GC content for longer ones",
      "salt-adjustedDescription": "Improved algorithm considering salt concentration effects for standard PCR",
      "santa-luciaDescription": "NCBI recommended high-precision algorithm with sequence composition corrections",
      "nearest-neighborDescription": "Classic thermodynamic-based algorithm widely used in primer design",
    },
    "amino-acid-table": {
      name: "Amino Acid Table",
      description: "Query amino acid abbreviations and codons",
      searchPlaceholder: "Enter amino acid name, abbreviation or codon...",
      aminoAcid: "Amino Acid",
      oneCode: "One Letter",
      threeCode: "Three Letter",
      codons: "Codons",
      selectedCodon: "Selected Codon",
      noResults: "No matching amino acids found",
    },
    "sequence-stats": {
      name: "Sequence Statistics Analyzer",
      description: "Calculate sequence length, GC content, base frequency, complexity and repeat detection",
      sequenceLabel: "Input Sequences",
      sequencePlaceholder: "Enter DNA/RNA sequences, supports FASTA format\nExample:\n>Sequence 1\nATCGATCGATCG\n>Sequence 2\nGCTAGCTAGCTA\nOr plain sequences:\nATCGATCG\nGCTAGCTA",
      formatHint: "💡 Supports FASTA format and plain sequences, one sequence per line",
      analyze: "Analyze Sequences",
      results: "Analysis Results",
      sequences: "sequences",
      overview: "Overview",
      composition: "Base Composition",
      repeats: "Repeat Sequences",
      dinucleotide: "Dinucleotide",
      sequenceName: "Sequence Name",
      length: "Length",
      gcContent: "GC Content",
      atContent: "AT Content",
      complexity: "Complexity",
      other: "Other",
      repeatsFound: "Repeats Found",
      positions: "Positions",
      noRepeats: "No repeat sequences found",
      dinucleotideFreq: "Dinucleotide Frequency Distribution",
    },
    "orf-finder": {
      name: "ORF Finder",
      description: "Find open reading frames in DNA sequences with 6-frame analysis",
      sequenceLabel: "Input DNA Sequences",
      sequencePlaceholder: "Enter DNA sequences, supports FASTA format\nExample:\n>Gene 1\nATGGCTAGCTAGCTAGCTAG\n>Gene 2\nATGAAACCCGGGTTTAAA",
      formatHint: "💡 Supports FASTA format and plain sequences",
      minLength: "Minimum Length (bp)",
      minLengthHint: "Minimum ORF length, must be multiple of 3",
      startCodons: "Start Codons",
      startCodonsHint: "Separate multiple start codons with commas",
      geneticCodeInfo: "Uses standard genetic code for translation, stop codons: TAA, TAG, TGA",
      findOrfs: "Find ORFs",
      results: "Analysis Results",
      orfsFound: "ORFs found",
      tableView: "Table View",
      detailView: "Detail View",
      sequenceLength: "Sequence Length",
      frame: "Frame",
      strand: "Strand",
      start: "Start",
      end: "End",
      length: "Length",
      startCodon: "Start Codon",
      stopCodon: "Stop Codon",
      molecularWeight: "Molecular Weight",
      noOrfsFound: "No ORFs found",
      position: "Position",
      dnaSequence: "DNA Sequence",
      proteinSequence: "Protein Sequence",
    },
    "sequence-translation": {
      name: "Sequence Translation",
      description: "DNA→RNA transcription, RNA→protein translation, genetic code selection, reverse complement",
      inputType: "Input Type",
      geneticCode: "Genetic Code",
      frame: "Reading Frame",
      stopMode: "Stop Codon Mode",
      truncate: "Truncate at first stop",
      preserveDelimiters: "Preserve delimiters (tabs, spaces, commas)",
      preserveHint: "Keep spaces/Tabs/commas so multiple sequences remain aligned when pasting from spreadsheets.",
      inputLabel: "Input sequence (DNA/RNA)",
      inputPlaceholder:
        "Paste DNA or RNA sequence. Delimiters like spaces, tabs, commas will be preserved if enabled.",
      transcribe: "DNA → RNA",
      translate: "RNA → Protein",
      reverseComplement: "Reverse Complement",
      outputLabel: "Output",
      outputPlaceholder: "Result will appear here",
      inputLength: "Input length",
      outputLength: "Output length",
    },
    "primer-dimer-detector": {
      name: "Primer Dimer Detector",
      description: "Detect primer complementarity, calculate dimer formation free energy, visualize structures, batch analysis",
      primerLabel: "Input Primers",
      primerPlaceholder: "Enter primer sequences, one per line or FASTA format\nExample:\n>Forward Primer\nATCGATCGATCG\n>Reverse Primer\nGCTAGCTAGCTA",
      formatHint: "💡 Supports FASTA format and plain sequences. Self-dimers and hetero-dimers will be analyzed.",
      analyze: "Analyze Dimers",
      results: "Analysis Results",
      dimers: "dimers detected",
      lowRisk: "Low Risk",
      mediumRisk: "Medium Risk",
      highRisk: "High Risk",
      overview: "Overview",
      structures: "Structures",
      risk: "Risk",
      primerPair: "Primer Pair",
      complementarity: "Complement %",
      freeEnergy: "ΔG (kcal/mol)",
      length: "Length",
      warning: "High-risk dimers (ΔG < -8 kcal/mol) may interfere with PCR efficiency. Consider redesigning primers or adjusting reaction conditions.",
    },
    "pcr-product-calculator": {
      name: "PCR Product Size Calculator",
      description: "Calculate primer positions and amplification product sizes from FASTA templates and primer pairs with specificity checking",
      templateLabel: "Template Sequences (FASTA)",
      templatePlaceholder: "Enter template sequences in FASTA format\nExample:\n>Template 1\nATCGATCGATCGATCGATCG\n>Template 2\nGCTAGCTAGCTAGCTAGCTA",
      primerLabel: "Primer Sequences",
      primerPlaceholder: "Enter primer sequences, FASTA format or one per line\nExample:\n>Forward Primer\nATCGATCGATCG\n>Reverse Primer\nGCTAGCTAGCTA",
      formatHint: "💡 Templates must be in FASTA format. Primers support FASTA or plain sequences. Maximum 2 mismatches allowed for primer binding.",
      calculate: "Calculate PCR Products",
      results: "PCR Analysis Results",
      combinations: "primer combinations",
      highSpecificity: "High",
      mediumSpecificity: "Medium",
      lowSpecificity: "Low",
      overview: "Overview",
      details: "Details",
      specificity: "Specificity",
      template: "Template",
      primerPair: "Primer Pair",
      productSize: "Product Size",
      products: "Products",
      forwardMatches: "Forward matches",
      reverseMatches: "Reverse matches",
      pcrProducts: "PCR Products",
      product: "Product",
      noProducts: "No PCR products found with current primer pair",
      tip: "High specificity indicates unique products with perfect primer matches. Low specificity suggests multiple products or primer mismatches.",
      primerPairs: "Primer Pairs",
      addPair: "Add Pair",
      pairNumber: "Primer Pair",
      forwardPrimer: "Forward Primer",
      reversePrimer: "Reverse Primer",
    },
    "molecular-weight-calculator": {
      name: "Molecular Weight Calculator",
      description: "Calculate molecular weights for DNA/RNA/proteins, concentration conversion, dilution calculator",
      molecularWeight: "MW",
      concentration: "Concentration",
      dilution: "Dilution",
      sequenceLabel: "Input Sequences",
      sequenceType: "Type",
      sequencePlaceholder: "Enter sequences in FASTA format or plain text\nExample:\n>Sequence 1\nATCGATCGATCG\n>Sequence 2\nGCTAGCTAGCTA",
      calculate: "Calculate MW",
      results: "Results",
      sequences: "sequences",
      sequenceName: "Name",
      length: "Length",
      mw: "MW (g/mol)",
      type: "Type",
      composition: "Composition",
      protein: "Protein",
      tip: "Molecular weights include phosphate groups for DNA/RNA. Protein calculations account for peptide bond formation.",
      concentrationCalc: "Concentration Calculator",
      dilutionCalc: "Dilution Calculator",
      dilutionHint: "C₁V₁ = C₂V₂ - Leave one field empty to calculate it",
      mass: "Mass",
      volume: "Volume",
      unit: "Unit",
      molecularWeightLabel: "MW (g/mol)",
      concentrationResult: "Concentration",
      molarity: "Molarity",
      copies: "Copies",
      initialConc: "Initial Conc.",
      initialVol: "Initial Vol.",
      finalConc: "Final Conc.",
      finalVol: "Final Vol.",
      dilutionFactor: "Dilution Factor",
      fieldsCompleted: "fields completed",
      autoCalculating: "Auto calculating...",
      fillThreeFields: "Fill any 3 fields to calculate the 4th",
    },
    "restriction-enzymes": {
      name: "Restriction Enzyme Tool",
      description: "Find common sites, render digestion map, multi-enzyme analysis, and basic cloning planning",
      analysis: "Restriction Analysis",
      sequence: "Input DNA Sequence",
      enzymes: "Select Enzymes",
      circular: "Circular DNA",
      enzyme: "Enzyme",
      position: "Position",
      strand: "Strand",
      overhang: "Overhang",
      fragments: "Fragments",
      cloning: "Cloning Planner",
      cloneHint: "Choose enzymes and check sticky/blunt-end compatibility",
      vector: "Vector Sequence",
      insert: "Insert Sequence",
      compatible: "Compatible for ligation",
      incompatible: "Not compatible",
      tool: {
        needSeq: "Provide sequences",
        noSite: "Site not found in sequence",
        bluntOk: "Blunt ends ligate, lower efficiency",
        typeMismatch: "Overhang type mismatch",
        stickyOk: "Sticky ends are compatible",
        seqMismatch: "Overhang sequences are not compatible",
      },
    },
    "protein-analysis": {
      name: "Protein Analysis Tool",
      description: "Calculate isoelectric point (pI), hydrophobicity analysis, and amino acid composition",
      input: "Protein Sequence Input",
      sequence: "Protein Sequence",
      placeholder: "Enter protein sequence (single letter amino acid codes)\nExample: MKTAYIAKQRQISFVK",
      residues: "residues",
      isoelectric: "Isoelectric Point (pI)",
      piUnit: "pH units",
      hydrophobicity: "Hydrophobicity",
      kyteDoolittle: "Kyte-Doolittle scale",
      hydrophobic: "Hydrophobic",
      hydrophilic: "Hydrophilic",
      composition: "Amino Acid Composition",
      polar: "Polar",
      charged: "Charged",
      special: "Special",
      aminoAcid: "AA",
      count: "Count",
      percentage: "%",
      hydrophobicityValue: "Hydrophobicity",
      note: "pI calculated using Henderson-Hasselbalch equation. Hydrophobicity based on Kyte-Doolittle scale.",
    },
    "sequence-format-converter": {
      name: "Sequence Format Converter",
      description: "Convert between FASTA/GenBank/EMBL formats, rename IDs, filter by length, and remove duplicates",
      input: "Input Sequences",
      inputLabel: "Paste sequences (FASTA/GenBank/EMBL format)",
      inputPlaceholder: ">seq1\nATCGATCGATCG\n>seq2\nGCTAGCTAGCTA",
      sequencesDetected: "sequences detected",
      processing: "Processing Options",
      outputFormat: "Output Format",
      renamePattern: "ID Rename Pattern",
      patternHint: "{n} = number, {id} = original ID",
      lengthFilter: "Length Filter",
      minLength: "Min",
      maxLength: "Max",
      deduplication: "Deduplication",
      removeDuplicates: "Remove duplicate sequences",
      deduplicationHint: "Keep only the first occurrence of identical sequences",
      enabled: "✓ Enabled",
      disabled: "○ Disabled",
      process: "Process Sequences",
      output: "Processed Output",
      note: "Supports automatic format detection. GenBank and EMBL parsing is simplified for basic conversion needs.",
    },
    "qpcr-data-analyzer": {
      name: "qPCR Data Analyzer",
      description: "Ct calculation, ΔΔCt relative quantification, standard curve fitting, and efficiency calculation",
      ddctAnalysis: "ΔΔCt Analysis",
      standardCurve: "Standard Curve",
      ddctInput: "ΔΔCt Data Input",
      referenceGene: "Reference Gene",
      controlGroup: "Control Group",
      treatmentGroup: "Treatment Group",
      ctData: "Ct Data (Sample, Target, Ct, Group)",
      ctPlaceholder: "Sample1\tGAPDH\t20.5\tcontrol\nSample1\tGeneX\t25.2\tcontrol\nSample2\tGAPDH\t20.8\ttreatment\nSample2\tGeneX\t23.1\ttreatment",
      dataPoints: "data points loaded",
      sample: "Sample",
      target: "Target",
      group: "Group",
      foldChange: "Fold Change",
      standardCurveInput: "Standard Curve Data",
      dilutionData: "Dilution Data (Dilution, Ct)",
      dilutionPlaceholder: "1000000\t15.2\n100000\t18.5\n10000\t21.8\n1000\t25.1\n100\t28.4",
      curvePoints: "curve points loaded",
      curveParameters: "Curve Parameters",
      slope: "Slope",
      intercept: "Intercept",
      efficiency: "Efficiency",
      dilution: "Dilution",
      note: "ΔΔCt method: 2^(-ΔΔCt). PCR efficiency calculated from slope: E = 10^(-1/slope) - 1. Optimal efficiency: 90-110%.",
    },
    "qpcr-fluorescence": {
      name: "qPCR Fluorescence Channel Tool",
      description: "Fluorophore database, channel design, and multiplex PCR optimization",
      database: "Fluorophore DB",
      channels: "Channel Design",
      multiplex: "Multiplex PCR",
      fluorophoreDatabase: "Fluorophore Database",
      search: "Search",
      searchPlaceholder: "Name or application...",
      brightness: "Brightness",
      stability: "Stability",
      cost: "Cost",
      all: "All",
      high: "High",
      medium: "Medium",
      low: "Low",
      excellent: "Excellent",
      good: "Good",
      fair: "Fair",
      poor: "Poor",
      excitation: "Ex (nm)",
      emission: "Em (nm)",
      applications: "Applications",
      channelDesign: "Channel Design",
      instrument: "qPCR Instrument",
      availableChannels: "Available Channels",
      recommendedFluorophores: "Recommended",
      multiplexDesign: "Multiplex PCR Design",
      targets: "PCR Targets",
      addTarget: "Add Target",
      autoAssign: "Auto Assign Channels",
      channelAssignments: "Channel Assignments",
      target: "Target",
      fluorophore: "Fluorophore",
      channel: "Channel",
      compatibility: "Compatibility",
      channelConflict: "Channel conflict",
      emissionColor: "Emission color",
      note: "Choose fluorophores with minimal spectral overlap. Consider instrument-specific filter sets and cross-talk between channels.",
    },
    "gel-electrophoresis": {
      name: "Gel Electrophoresis Analyzer",
      description: "Molecular weight standard curve, band size estimation, and concentration quantification",
      standardCurve: "Standard Curve",
      bandAnalysis: "Band Analysis",
      quantification: "Quantification",
      molecularWeightStandard: "Molecular Weight Standard",
      gelType: "Gel Type",
      protein: "Protein",
      presetMarker: "Preset Marker",
      selectMarker: "Select marker...",
      standardData: "Standard Data",
      distance: "Distance (mm)",
      dnaPlaceholder: "10000\t15\n5000\t25\n3000\t35\n1000\t50\n500\t65",
      proteinPlaceholder: "116\t20\n97\t25\n66\t35\n45\t45\n31\t55",
      curveParameters: "Curve Parameters",
      slope: "Slope",
      intercept: "Intercept",
      unknownBands: "Unknown Bands",
      addBand: "Add Band",
      bandName: "Band Name",
      intensity: "Intensity (optional)",
      estimatedSize: "Estimated Size",
      concentrationStandards: "Concentration Standards",
      intensityData: "Intensity Data",
      concentration: "Concentration",
      intensityPlaceholder: "100\t5000\n200\t10000\n300\t15000\n400\t20000\n500\t25000",
      standardPoints: "standard points loaded",
      estimatedConcentration: "Estimated Concentration",
      note: "Standard curve uses log(molecular weight) vs migration distance. Measure distances accurately for best results. R² ≥ 0.95 recommended.",
    },
    "buffer-calculator": {
      name: "Buffer Calculator",
      description: "Common buffer recipes, pH adjustment, ionic strength calculation, and molarity conversion",
      bufferRecipes: "Buffer Recipes",
      phAdjustment: "pH Adjustment",
      ionicStrength: "Ionic Strength",
      molarityConversion: "Molarity",
      commonBuffers: "Common Buffer Systems",
      bufferName: "Buffer",
      phRange: "pH Range",
      applications: "Applications",
      bufferCalculation: "Buffer Calculation",
      bufferSystem: "Buffer System",
      targetPH: "Target pH",
      totalConcentration: "Total Concentration (mM)",
      finalVolume: "Final Volume (mL)",
      recipe: "Recipe",
      ratio: "Base/Acid Ratio",
      instructions: "Dissolve compounds in ~80% of final volume, adjust pH if needed, then dilute to final volume.",
      ionicStrengthCalc: "Ionic Strength Calculation",
      salt: "Salt",
      concentration: "Concentration (mM)",
      results: "Results",
      dissociation: "Dissociation",
      molarityCalculation: "Molarity Calculation",
      compound: "Compound",
      molecularWeight: "Molecular Weight (g/mol)",
      mass: "Mass (mg)",
      volume: "Volume (mL)",
      molarity: "Molarity (M)",
      calculation: "Calculation",
      calculatedMolarity: "Calculated Molarity",
      millimolar: "Millimolar",
      requiredMass: "Required Mass",
      grams: "Grams",
      note: "Henderson-Hasselbalch equation: pH = pKa + log([A-]/[HA]). Ionic strength: I = 0.5 × Σ(ci × zi²). Always verify pH with a pH meter.",
    },
    "cell-culture-calculator": {
      name: "Cell Culture Calculator",
      description: "Cell density calculation, passage dilution ratios, media preparation, and viability statistics",
      cellDensity: "Cell Density",
      passage: "Passage",
      media: "Media",
      viability: "Viability",
      hemocytometer: "Hemocytometer Counting",
      chamberType: "Chamber Type",
      standard: "Standard (0.1 μL/square)",
      improved: "Improved Neubauer (0.04 μL/square)",
      cellCount: "Cell Count",
      squaresCounted: "Squares Counted",
      dilutionFactor: "Dilution Factor",
      results: "Results",
      cellsPerMl: "Cells/mL",
      cellsPerUl: "Cells/μL",
      avgPerSquare: "Avg/Square",
      countedVolume: "Counted Volume",
      passageCalculation: "Passage Calculation",
      cellLine: "Cell Line",
      currentDensity: "Current Density (cells/cm²)",
      targetDensity: "Target Density (cells/cm²)",
      currentFlask: "Current Flask (cm²)",
      newFlask: "New Flask (cm²)",
      recommended: "Recommended",
      density: "Density",
      splitRatio: "Split",
      doublingTime: "Doubling",
      passageProtocol: "Passage Protocol",
      totalCells: "Total Cells",
      cellSuspension: "Cell Suspension",
      addMedia: "Add Media",
      mediaPreparation: "Media Preparation",
      totalVolume: "Total Volume (mL)",
      component: "Component",
      stockConc: "Stock Conc.",
      finalConc: "Final Conc.",
      volume: "Volume (mL)",
      mediaNote: "Add components to base medium in order. Adjust volume with base medium to reach final volume. Filter sterilize if needed.",
      viabilityAssessment: "Viability Assessment",
      liveCells: "Live Cells",
      deadCells: "Dead Cells (optional)",
      viabilityResults: "Viability Results",
      excellentViability: "Excellent viability",
      goodViability: "Good viability",
      poorViability: "Poor viability - check culture conditions",
      note: "Standard hemocytometer: 1 large square = 0.1 μL. Improved Neubauer: 1 large square = 0.04 μL. Always count viable cells using trypan blue exclusion.",
    },
    "protein-purification": {
      name: "Protein Purification Calculator",
      description: "Protein concentration assays, purification fold calculation, recovery statistics, and SDS-PAGE gel concentration",
      assay: "Assay",
      purification: "Purification",
      recovery: "Recovery",
      gel: "SDS-PAGE",
      concentrationAssay: "Protein Concentration Assay",
      assayMethod: "Assay Method",
      absorbance: "Absorbance",
      standardCurve: "Standard Curve",
      dilutionFactor: "Dilution Factor",
      results: "Results",
      concentration: "Concentration",
      outOfRange: "Outside recommended range",
      methodInfo: "Method Information",
      advantages: "Advantages",
      limitations: "Limitations",
      purificationTable: "Purification Table",
      addStep: "Add Step",
      resetDefault: "Reset Default",
      stepName: "Step",
      volume: "Volume (mL)",
      totalProtein: "Total Protein (mg)",
      totalActivity: "Total Activity (U)",
      step: "Step",
      specificActivity: "Sp. Activity (U/mg)",
      yield: "Yield (%)",
      purificationFold: "Fold",
      recoveryStatistics: "Recovery Statistics",
      overallYield: "Overall Yield",
      finalPurification: "Final Purification",
      totalSteps: "Total Steps",
      sdsPageGel: "SDS-PAGE Gel Calculator",
      targetMW: "Target Protein MW (kDa)",
      recommendedGels: "Recommended Gels",
      separationRange: "Range",
      gelType: "Gel Type",
      acrylamide: "Acrylamide %",
      crosslinker: "Crosslinker",
      bradford: {
        advantage1: "Fast",
        advantage2: "Simple",
        advantage3: "Compatible with most buffers",
        limitation1: "Affected by detergents",
        limitation2: "Non-linear at high concentrations",
      },
      bca: {
        advantage1: "Compatible with detergents",
        advantage2: "Less affected by protein composition",
        limitation1: "Slower (2h incubation)",
        limitation2: "Affected by reducing agents",
      },
      lowry: {
        advantage1: "Sensitive",
        advantage2: "Well established",
        limitation1: "Many interfering substances",
        limitation2: "Time consuming",
      },
      a280: {
        advantage1: "Non-destructive",
        advantage2: "Real-time",
        advantage3: "No reagents needed",
        limitation1: "Requires extinction coefficient",
        limitation2: "Affected by nucleic acids",
      },
      note: "Purification fold = (Specific activity at step) / (Initial specific activity). Yield = (Total activity at step) / (Initial total activity) × 100%.",
    },
    maneloca: {
      name: "ManeLoca",
      description: "Find corresponding positions in MANE Select transcripts from genomic coordinates",
      subtitle: "MANE Select Transcript Position Finder",
      visitSite: "Visit ManeLoca",
      viewSource: "View Source",
      note: "Click 'Visit ManeLoca' to access the full application with all features",
      notice: "ManeLoca provides accurate genomic coordinate to transcript position mapping based on MANE Select annotations. The web application offers an intuitive interface for researchers and clinicians working with genomic data.",
      features: {
        genomic: "Genomic Coordinate Mapping",
        genomicDesc: "Convert genomic coordinates to transcript positions",
        mane: "MANE Select Support",
        maneDesc: "High-confidence transcript annotations from NCBI and Ensembl",
        web: "Web-based Interface",
        webDesc: "Easy-to-use React application with modern UI",
        accurate: "Accurate Mapping",
        accurateDesc: "Precise position conversion for genomic analysis",
      },
    },
    deephpo: {
      name: "DeepHPO",
      description: "LLM-based clinical phenotype HPO term extraction tool, providing convenient HPO term query services",
      subtitle: "AI-Powered Clinical Phenotype HPO Term Extraction",
      visitSite: "Visit DeepHPO",
      viewSource: "View Source",
      note: "Click 'Visit DeepHPO' to access the full application with all features",
      notice: "Due to Vercel's 60-second timeout mechanism, queries may fail if complete information cannot be retrieved in time. The default API provider is SiliconFlow, but you can configure other OpenAI-compatible service providers through the settings button on the homepage.",
      features: {
        ai: "AI-Powered Extraction",
        aiDesc: "Utilizes LLM model for intelligent HPO term extraction",
        hpo: "HPO Ontology",
        hpoDesc: "Standardized clinical phenotype terminology system",
        web: "Web-based Interface",
        webDesc: "Easy-to-use web application accessible via Vercel",
        flexible: "Flexible API Configuration",
        flexibleDesc: "Support for custom OpenAI-compatible API providers",
      },
    },
    "aa-converter": {
      name: "Amino Acid Converter",
      description: "Batch convert pHGVS format amino acid abbreviations between three-letter and one-letter codes (e.g., p.Leu858Arg ↔ p.L858R)",
      conversionMode: "Conversion Mode",
      threeToOne: "Three-letter → One-letter",
      oneToThree: "One-letter → Three-letter",
      inputLabel: "Input Variant List",
      inputPlaceholder: "Enter pHGVS format amino acid variants, one per line\nExample:\np.Leu858Arg\np.Gly12Asp\np.Gln61Ter\nOr one-letter format:\np.L858R\np.G12D\np.Q61*",
      formatHint: "💡 Select conversion mode for batch conversion. Supports Ter, *, X for stop codons. Max 1000 lines.",
      outputLabel: "Conversion Result",
      stopCodonFormat: "Stop Codon Format",
      stopCodonHint: "Select output format for stop codons (Ter, * or X)",
      convert: "Convert",
      lines: "lines",
      lineLimitWarning: "Input exceeds limit! Maximum {max} lines supported to ensure smooth browser performance.",
      examplesTitle: "Usage Examples",
      example1Title: "Three-letter to One-letter",
      example2Title: "One-letter to Three-letter",
      example3Title: "Stop Codon Conversion",
      input: "Input",
      output: "Output",
    },
    "index-checker": {
      name: "Index Checker",
      description: "Detect duplicate indices, reverse complement matches, and similar sequences for single-end and dual-index validation",
      inputLabel: "Input Index Data",
      inputPlaceholder: "Paste index data, supports copying from Excel tables\nFormat: SampleName Index1 [Index2]\nExample:\nSample1\tATCGATCG\tGCTAGCTA\nSample2\tTGCAGTCA\tACGTACGT\nSample3\tCGATCGAT",
      formatHint: "💡 Supports Tab, comma, or space delimiters. Format per line: SampleName Index1 [Index2]. Maximum 200 samples.",
      checkIndices: "Check Indices",
      results: "Validation Results",
      allValid: "All Valid",
      issuesFound: "Issues Found",
      totalChecked: "Checked",
      errors: "Errors",
      warnings: "Warnings",
      issuesTab: "Issues",
      dataTab: "Data",
      noIssues: "No issues found, all indices are valid!",
      duplicateIndex: "Duplicate Index",
      reverseComplementMatch: "Reverse Complement Match",
      reverseMatch: "Reverse Match",
      similarIndex: "Similar Index",
      bpDifference: "{n}bp difference",
      affectedRows: "Affected Samples",
      row: "Row",
      sampleName: "Sample Name",
      index1: "Index1",
      index2: "Index2",
      length: "Length",
      difference: "difference",
      error: "Error",
      warning: "Warning",
      tooManyIndices: "Number of samples exceeds limit (max {max})",
    },
    warfarin: {
      name: "Warfarin Dosage Calculator",
      description: "Predict optimal Warfarin dosages based on multiple pharmacogenomic and clinical algorithms including IWPC, Gage, Xiangya, Clover, and Biss models",
      subtitle: "Pharmacogenomic-Based Warfarin Dosing Prediction",
      visitSite: "Visit Calculator",
      viewSource: "View Source",
      note: "Click 'Visit Calculator' to access the full application with all dosing models and features",
      notice: "This calculator integrates multiple validated pharmacogenomic algorithms to provide evidence-based warfarin dosing recommendations. It is designed for research and educational purposes. Clinical decisions should always be made by qualified healthcare professionals.",
      features: {
        models: "Multiple Algorithms",
        modelsDesc: "IWPC, Gage, Xiangya, Clover, and Biss models for comprehensive analysis",
        pharmacogenomic: "Pharmacogenomic Integration",
        pharmacogenomicDesc: "Incorporates genetic variants (CYP2C9, VKORC1) for personalized dosing",
        clinical: "Clinical Parameters",
        clinicalDesc: "Considers age, weight, height, and other clinical factors",
        opensource: "Open Source",
        opensourceDesc: "Freely available for research, education, and local deployment",
      },
    },
    mutalyzer: {
      name: "Mutalyzer",
      description: "HGVS variant description validation, normalization, format conversion and sequence mapping tool, integrated with official Mutalyzer API",
      apiNotice: "Please note: All requests will be sent to",
      convert: "Convert",
      normalize: "Normalize",
      map: "Map",
      extract: "Extract",
      mutate: "Mutate",
      hgvsDescription: "HGVS Variant Description",
      variantDescription: "Variant Description",
      convertHint: "Enter any HGVS format (g./c./p.), automatically convert to other formats",
      chrFormatNote: "💡 Supported Input Formats",
      supported: "Supported",
      refseqFormat: "RefSeq format",
      transcriptFormat: "Transcript format",
      formatExamples: "Format Examples",
      allFormatsSupported: "Mutalyzer supports GRCh37/GRCh38 chromosome formats, RefSeq IDs, and transcript IDs, automatically converting to c. and p. formats",
      targetReference: "Target Reference",
      referenceSequence: "Reference Sequence",
      observedSequence: "Observed Sequence",
      normalizeHint: "Normalize variant description to HGVS standard format",
      mapHint: "Map variant from one transcript to another version",
      extractHint: "Compare two sequences and generate HGVS variant description",
      mutateHint: "Generate mutated sequence from variant description",
      submit: "Submit Query",
      result: "Query Result",
      inputDesc: "Input Description",
      normalizedDesc: "Normalized Description",
      genomicCoord: "Genomic Coordinate",
      transcriptCoord: "Transcript Coordinate",
      cDescriptions: "Transcript Variants (c.)",
      pDescriptions: "Protein Variants (p.)",
      proteinDesc: "Protein Variant",
      rnaDesc: "RNA Variant",
      notices: "Notices",
      mappedDesc: "Mapped Description",
      refSeqDiff: "Reference Sequence Differences",
      hasDifferences: "Reference sequences have differences",
      noDifferences: "No reference sequence differences",
      equivalentDesc: "Equivalent Descriptions",
      extractedDesc: "Extracted Variant Description",
      extractHintNote: "This variant description is automatically generated based on the input reference and observed sequences",
      mutatedSeq: "Mutated Sequence",
      referenceSeq: "Reference Sequence",
      seqLength: "Sequence Length",
      copySeq: "Copy Sequence",
      copyFasta: "Copy as FASTA",
      viewRawJson: "View Raw JSON Data",
      examplesTitle: "Usage Examples",
      example1Title: "Normalize Variant Description",
      example1Output: "Normalized HGVS format",
      example2Title: "Transcript Mapping",
      example2Input: "Description: NM_003002.2:c.274G>T, Target: NM_003002.4",
      example2Output: "Mapped variant description",
      example3Title: "Extract Variant from Sequences",
      example3Input: "Reference: AAAATTTCCCCCGGGG, Observed: AAAATTTCCCCGGGGG",
      example3Output: "Auto-generated HGVS description",
      apiReference: "API Reference",
      apiDescription: "This tool uses the official Mutalyzer API to provide validation and conversion services for HGVS variant descriptions. All data processing is performed on Mutalyzer servers.",
      viewApiDocs: "View API Docs",
      visitWebsite: "Visit Website",
      input: "Input",
      output: "Output",
    },
    "sequencing-depth": {
      name: "Sequencing Depth Calculator",
      description: "Calculate NGS sequencing depth and required data size with capture efficiency",
      calculationMode: "Calculation Mode",
      targetToData: "Target Region → Data Size",
      targetToDataDesc: "Calculate required data size from target region, depth and capture efficiency (Common)",
      dataToDepth: "Data Size → Effective Depth",
      dataToDepthDesc: "Calculate effective depth from actual data size and capture efficiency",
      parameters: "Parameters",
      targetSize: "Target Region Size",
      targetSizeHint: "e.g., Panel 0.5Mb, Exome 30-50Mb, WGS 3Gb",
      readLength: "Read Length",
      readLengthHint: "Common: PE150 (paired-end 150bp), PE100, SE50, etc.",
      captureEfficiency: "Capture Efficiency",
      captureEfficiencyHint: "On-target reads ratio. Panel typically 40-60%, Exome 60-80%, WGS ~100%",
      totalReads: "Total Reads",
      targetDepth: "Target Depth",
      targetDepthHint: "Common: Panel 500-1000×, Exome 100×, WGS 30×",
      inputDataSize: "Data Size",
      inputDataSizeHint: "Input total bases produced by sequencing",
      results: "Results",
      requiredReads: "Required Reads",
      requiredDataSize: "Required Data Size",
      effectiveDepth: "Effective Depth",
      totalBases: "Total Bases",
      estimatedDataSize: "Data Size",
      formula: "Formula: Data Size = (Target Size × Target Depth) / Capture Efficiency. Effective Depth = (Data Size × Capture Efficiency) / Target Size.",
    },
    "codon-optimizer": {
      name: "Codon Usage Analyzer",
      description: "Analyze codon usage bias and calculate CAI for different organisms",
      inputSequence: "Input DNA Sequence",
      placeholder: "Enter DNA sequence (FASTA format or plain text):\n>Gene1\nATGGCTAGCTAGCTAGC...",
      analyze: "Analyze",
      human: "Human",
      yeast: "Yeast",
      overview: "Overview",
      rareCodeons: "Rare Codons",
      composition: "Composition",
      sequenceLength: "Sequence Length",
      gcContent: "GC Content",
      cai: "Codon Adaptation Index (CAI)",
      excellent: "Excellent",
      good: "Good",
      moderate: "Moderate",
      poor: "Poor",
      caiDesc: "CAI ranges from 0 to 1. Higher values indicate better codon optimization.",
      rareCodonCount: "Rare Codons",
      rareCodensTitle: "Rare Codons (Frequency < 10/1000)",
      position: "Position",
      codon: "Codon",
      aminoAcid: "AA",
      frequency: "Frequency",
      noRareCodens: "No rare codons detected. Sequence is well optimized!",
      aaComposition: "Amino Acid Composition",
      tip: "CAI measures how well a gene's codon usage matches the host organism. Rare codons may slow translation or reduce expression.",
    },
    "sgrna-designer": {
      name: "sgRNA Designer",
      description: "Design and score CRISPR sgRNAs with PAM site detection",
      inputSequence: "Target DNA Sequence",
      pamType: "PAM Type",
      placeholder: "Enter target DNA sequence (FASTA format or plain text):\n>Target_Gene\nATGGCTAGCTAGCTAGC...",
      findSgRNAs: "Find sgRNAs",
      foundResults: "Found",
      position: "Pos",
      strand: "Strand",
      sequence: "sgRNA Sequence",
      score: "Score",
      rating: "Rating",
      excellent: "Excellent",
      good: "Good",
      moderate: "Moderate",
      poor: "Poor",
      detectedIssues: "Detected Issues",
      issueGCExtreme: "GC content too extreme",
      issueGCSuboptimal: "GC content suboptimal",
      issuePolyT: "Contains poly-T (TTTT) - transcription terminator",
      issueSecondary: "Potential secondary structure",
      issueNoG: "Does not start with G (U6 promoter preference)",
      noResults: "No sgRNAs found. Try a different sequence or PAM type.",
      tip: "Scoring considers GC content (40-60% optimal), poly-T sequences, secondary structure, and 5' G preference. Higher scores indicate better sgRNAs.",
    },
    "tmbCalculator": {
      name: "TMB Calculator",
      description: "Calculate Tumor Mutational Burden (TMB) with Panel-TMB to WES-TMB correction",
      panelSize: "Panel Size (bp)",
      panelSizePlaceholder: "Enter panel size in base pairs",
      panelSizeHint: "Example: 500000 (0.5Mb Panel), 1000000 (1Mb Panel)",
      mutationCount: "Somatic Mutation Count",
      mutationCountPlaceholder: "Enter number of detected somatic mutations",
      mutationCountHint: "Only count non-synonymous mutations (missense, nonsense, frameshift, etc.), exclude synonymous mutations",
      useCorrection: "Use WES Correction Formula",
      correctionFormula: "Correction Formula",
      kValue: "k value (slope)",
      bValue: "b value (intercept)",
      correctionHint: "Correction parameters are typically obtained through linear regression, different panels require different correction parameters",
      calculate: "Calculate TMB",
      clear: "Clear",
      results: "Results",
      panelTmb: "Panel-TMB",
      wesTmb: "WES-TMB (Corrected)",
      mutationsPerMb: "mutations/Mb",
      correctedValue: "Correction Calculation",
      about: "About TMB",
      whatIsTmb: "What is TMB?",
      tmbDescription: "Tumor Mutational Burden (TMB) is the number of somatic mutations per megabase in the tumor genome. It is an important biomarker for predicting the efficacy of immune checkpoint inhibitors. Higher TMB indicates more neoantigens produced by the tumor, potentially leading to better immunotherapy response.",
      whyCorrection: "Why Correction?",
      correctionDescription: "Panel sequencing (e.g., targeted panels) covers a smaller region and may have systematic differences from whole exome sequencing (WES) TMB values. A correction formula (WES-TMB = k × Panel-TMB + b) established through linear regression can convert Panel-TMB to equivalent WES-TMB, improving comparability between different platforms.",
      example: "Example",
      exampleText: "Suppose a 1Mb panel detected 50 somatic mutations:",
      exampleStep1: "Panel-TMB = 50 / 1000000 × 1000000 = 50 mutations/Mb",
      exampleStep2: "If using correction formula k=0.9, b=2",
      exampleStep3: "WES-TMB = 0.9 × 50 + 2 = 47 mutations/Mb",
      invalidPanelSize: "Please enter a valid panel size (greater than 0)",
      invalidMutationCount: "Please enter a valid mutation count (greater than or equal to 0)",
      invalidCorrectionParams: "Please enter valid correction parameters (k and b values)",
    },
  },
}
